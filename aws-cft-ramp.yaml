Parameters:
  BucketName:
    Description: Name of an S3 bucket to upload test results to
    Type: String
  SSHKeyName:
    Description: (optional) Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: String
    MaxLength: '255'
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: can contain only ASCII characters
Conditions:
  HasKeyName: !Not [ !Equals [ "", !Ref SSHKeyName ] ]
Resources:
  LoadTestSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: LoadTestSG
      GroupDescription: 'Accept requests for SSH and ping'
      SecurityGroupIngress:
        - Description: ping
          IpProtocol: icmp
          CidrIp: 0.0.0.0/0
          FromPort: '8'
          ToPort: '-1'
        - Description: SSH
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '22'
          ToPort: '22'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              -
                Effect: "Allow"
                Action:
                  - "ec2:DescribeImages"
                Resource: "*"
  LoadTestRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      Policies:
        -
          PolicyName: "BucketUse"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "s3:ListBucket"
                Resource: !Join [ "", [ "arn:aws:s3:::", !Ref BucketName ] ]
              -
                Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:DeleteObject"
                Resource: !Join [ "", [ "arn:aws:s3:::", !Ref BucketName, "/*" ] ]
  AMIInfoFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: amilookup.zip
      Handler: amilookup.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
  AMIInfo:
    Type: Custom::AMIInfo
    Properties:
      ServiceToken: !GetAtt AMIInfoFunction.Arn
      Region: !Ref AWS::Region
      Architecture: HVM64
  InstanceProfile:
    DependsOn: LoadTestRole
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - "LoadTestRole"
  TestBox:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !GetAtt AMIInfo.Id
      InstanceInitiatedShutdownBehavior: terminate
      InstanceType: t2.large
      KeyName: !If [ HasKeyName, !Ref SSHKeyName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
        - !Ref LoadTestSG
      Tags:
        - Key: Name
          Value: load-test
      UserData:
        Fn::Base64: !Sub |
          #!bin/bash
          yum remove -y java-1.7.0-openjdk
          yum install -y java-1.8.0
          aws s3 cp --recursive s3://${BucketName}/gatling/ /gatling/
          rm -rf /gatling/user-files/simulations/
          mkdir /gatling/user-files/simulations/
          chmod -R 777 /gatling
