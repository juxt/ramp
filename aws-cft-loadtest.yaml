Parameters:
  TargetUrl:
    Description: URL to test. Don't end with a /
    Type: String
  PeakUsers:
    Default: 2000
    Description: Max number of concurrent users
    Type: Number
  Duration:
    Default: 360
    Description: Total duration of test in sec. 1/3 will be ramp-up, 1/3 peak, 1/3 ramp-down
    Type: Number
  BucketName:
    Description: Name of an S3 bucket to upload test results to
    Type: String
  SelfDestruct:
    Default: false
    Description: If "true", the instance will terminate itself after the test (default false)
    Type: String
  SSHKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: String
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: can contain only ASCII characters
Resources:
  BucketUseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "BucketUse"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "s3:ListBucket"
                Resource: !Join [ "", [ "arn:aws:s3:::", !Ref BucketName ] ]
              -
                Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:DeleteObject"
                Resource: !Join [ "", [ "arn:aws:s3:::", !Ref BucketName, "/*" ] ]
      RoleName: "BucketUseRole"
  InstanceProfile:
    DependsOn: BucketUseRole
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - "BucketUseRole"
  TestBox:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: ami-7c4f7097
      InstanceInitiatedShutdownBehavior: terminate
      InstanceType: t2.large
      KeyName: !Ref SSHKeyName
      Tags:
        - Key: Name
          Value: load-test
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash

            url=\"${TargetUrl}\"
            peakUsers=${PeakUsers}
            totalDuration=${Duration}
            bucketName=${BucketName}
            selfDestruct=${SelfDestruct}

            yum install -y java-1.8.0
            echo "1" > /proc/sys/net/ipv4/tcp_tw_reuse
            echo "16000   64000" > /proc/sys/net/ipv4/ip_local_port_range
            cd /
            wget https://repo1.maven.org/maven2/io/gatling/highcharts/gatling-charts-highcharts-bundle/2.3.1/gatling-charts-highcharts-bundle-2.3.1-bundle.zip
            unzip gatling-charts-highcharts-bundle-2.3.1-bundle.zip
            rm -f gatling-charts-highcharts-bundle-2.3.1-bundle.zip
            mv gatling-charts-highcharts-bundle-2.3.1/ gatling/
            cd gatling/
            rm -rf user-files/simulations/
            mkdir user-files/simulations/

            cat << EOF >  user-files/simulations/KermitSimulation.scala
            package computerdatabase
            import io.gatling.core.Predef._
            import io.gatling.http.Predef._
            import scala.concurrent.duration._

            object Params {
            val peakUsers = $peakUsers
            val totalDuration = $totalDuration
            val url = $url}

            object Get {
              val get = repeat(Params.totalDuration * 3/5, "n") {
                exec(http("Get")
                  .get("/"))
                  .pause(1)}}

            class KermitSimulation extends Simulation {
              val httpConf = http
                .baseURL(Params.url)
                .acceptHeader("text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
                .doNotTrackHeader("1")
                .acceptLanguageHeader("en-US,en;q=0.5")
                .acceptEncodingHeader("gzip, deflate")
                .userAgentHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:16.0) Gecko/20100101 Firefox/16.0")
            val headers_10 = Map("Content-Type" -> "application/x-www-form-urlencoded")
            val scn = scenario("Single GET").exec(Get.get)

            setUp(scn.inject(
              // atOnceUsers(Params.peakUsers)
              rampUsers(Params.peakUsers) over (Params.totalDuration/3 seconds)
            )).protocols(httpConf)}
            EOF

            ./bin/gatling.sh -m > results/gatling.out
            aws s3 cp results/kermitsimulation-* s3://$bucketName/

            if [ $selfDestruct == true ]; then
                shutdown -P now
            fi
