Parameters:
  TargetUrl:
    Description: URL to test. Precede with http:// or https://. Do not end with a /
    Type: String
    AllowedPattern: '^(http(s?):\/\/)((www\.)?+[a-zA-Z0-9\.\-\_]+(\.[a-zA-Z]{2,3})+[a-zA-Z0-9\_\-\.\?\%\#\&\=]+)([a-zA-Z0-9\_\-\.\?\%\#\&\=]*[a-zA-Z0-9\_\-\.\?\%\#\&\=]+)?$'
    ConstraintDescription: should be a valid URL that starts with http:// or https:// and doesn't end with a /
  PeakUsers:
    Default: 3000
    Description: Max number of concurrent users
    Type: Number
  Duration:
    Default: 720
    Description: Total duration of test in sec. 1/3 will be ramp-up, 1/3 peak, 1/3 ramp-down
    Type: Number
  BucketName:
    Description: Name of an S3 bucket to upload test results to
    Type: String
  SelfDestruct:
    Default: true
    Description: If "true", the stack will delete itself after completing the test
    Type: String
  SSHKeyName:
    Description: (optional) Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: String
    MaxLength: '255'
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: can contain only ASCII characters
Conditions:
  HasKeyName: !Not [ !Equals [ "", !Ref SSHKeyName ] ]
Resources:
  LoadTestSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: LoadTestSG
      GroupDescription: 'Accept requests for SSH and ping'
      SecurityGroupIngress:
        - Description: ping
          IpProtocol: icmp
          CidrIp: 0.0.0.0/0
          FromPort: '8'
          ToPort: '-1'
        - Description: SSH
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '22'
          ToPort: '22'
  LoadTestRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "BucketUse"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "s3:ListBucket"
                Resource: !Join [ "", [ "arn:aws:s3:::", !Ref BucketName ] ]
              -
                Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:DeleteObject"
                Resource: !Join [ "", [ "arn:aws:s3:::", !Ref BucketName, "/*" ] ]
        -
          PolicyName: "SelfDestruct"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - "cloudformation:DeleteStack"
                Resource: !Ref "AWS::StackId"
              - Effect: Allow
                Action: [ "ec2:TerminateInstances" ]
                Resource: "*"
                Condition:
                  StringEquals:
                    "ec2:ResourceTag/aws:cloudformation:stack-id": !Ref AWS::StackId
              - Effect: Allow
                Action: [ "ec2:DescribeInstances" ]
                Resource: "*"
              - Effect: Allow
                Action:
                - "iam:RemoveRoleFromInstanceProfile"
                - "iam:DeleteInstanceProfile"
                Resource: !Sub "arn:aws:iam::${AWS::AccountId}:instance-profile/*"
              - Effect: Allow
                Action:
                - "iam:DeleteRole"
                - "iam:DeleteRolePolicy"
                Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/LoadTestRole"
              - Effect: Allow
                Action:
                - "ec2:DeleteSecurityGroup"
                - "ec2:RevokeSecurityGroupEgress"
                - "ec2:RevokeSecurityGroupIngress"
                Resource: "arn:aws:ec2:*:*:security-group/*"
      RoleName: "LoadTestRole"
  InstanceProfile:
    DependsOn: LoadTestRole
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - "LoadTestRole"
  TestBox:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: ami-7c4f7097
      InstanceInitiatedShutdownBehavior: terminate
      InstanceType: t2.large
      KeyName: !If [ HasKeyName, !Ref SSHKeyName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
        - !Ref LoadTestSG
      Tags:
        - Key: Name
          Value: load-test
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            yum install -y java-1.8.0
            echo "1" > /proc/sys/net/ipv4/tcp_tw_reuse
            echo "16000   64000" > /proc/sys/net/ipv4/ip_local_port_range
            cd /
            wget https://repo1.maven.org/maven2/io/gatling/highcharts/gatling-charts-highcharts-bundle/2.3.1/gatling-charts-highcharts-bundle-2.3.1-bundle.zip
            unzip gatling-charts-highcharts-bundle-2.3.1-bundle.zip
            rm -f gatling-charts-highcharts-bundle-2.3.1-bundle.zip
            mv gatling-charts-highcharts-bundle-2.3.1/ gatling/
            cd gatling/
            rm -rf user-files/simulations/
            mkdir user-files/simulations/

            cat << EOF >  user-files/simulations/LoadSimulation.scala
            package computerdatabase
            import io.gatling.core.Predef._
            import io.gatling.http.Predef._
            import scala.concurrent.duration._

            object Params {
            val peakUsers = ${PeakUsers}
            val totalDuration = ${Duration}
            val url = "${TargetUrl}"}

            object Get {
              val get = repeat(Params.totalDuration * 3/5, "n") {
                exec(http("Get")
                  .get("/"))
                  .pause(1)}}

            class LoadSimulation extends Simulation {
              val httpConf = http
                .baseURL(Params.url)
                .acceptHeader("text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
                .doNotTrackHeader("1")
                .acceptLanguageHeader("en-US,en;q=0.5")
                .acceptEncodingHeader("gzip, deflate")
                .userAgentHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:16.0) Gecko/20100101 Firefox/16.0")
            val headers_10 = Map("Content-Type" -> "application/x-www-form-urlencoded")
            val scn = scenario("Single GET").exec(Get.get)

            setUp(scn.inject(
              // atOnceUsers(Params.peakUsers)
              rampUsers(Params.peakUsers) over (Params.totalDuration/3 seconds)
            )).protocols(httpConf)}
            EOF

            ./bin/gatling.sh -m > results/gatling.out
            aws s3 cp --recursive results/ s3://${BucketName}/

            if [ ${SelfDestruct} == true ]; then
                aws cloudformation delete-stack --stack-name ${AWS::StackId} --region ${AWS::Region}
            fi
